import java.util.ArrayList;
import java.util.Iterator;
import java.util.NoSuchElementException;
import java.util.Stack;




public class BinarySearchTree<T> implements Iterable{
	private BinaryNode root;
	private BinaryNode left;
	private BinaryNode right;
//	private T data;
	private final BinaryNode NULL_NODE = new BinaryNode();

	public BinarySearchTree() {
		root = NULL_NODE;
		
	}

	public int size(){
		if(root == NULL_NODE){
			return 0;
		}
		else{
			return root.size();
		}
		

		
	}
	
	
	public int height(){
		return this.root.getHeight();
	}

	
	public boolean contains(T a){
		return root.contains(a);
		
	}
	
	public Iterator<T> inefficientIterator(){
		return new ArrayListIterator();
	}
	
	class ArrayListIterator implements Iterator<T>{
		private ArrayList<T> list;
		int counter = 0;
		
		public ArrayListIterator(){
			list = toArrayList();
			counter = 0;
		}
		
		
		
		@Override
		public boolean hasNext() {
			// TODO Auto-generated method stub
			return counter < list.size();
		}

		@Override
		public T next() {
			if(!hasNext()){
				throw new NoSuchElementException("no more items");
			}
			counter++;
			// TODO Auto-generated method stub
			return list.get(counter-1);
		}

		@Override
		public void remove() {
			// TODO Auto-generated method stub
			
		}
		

		
	}
	
	class preOrderIterator implements Iterator<T>{
		
		private Stack<BinaryNode> s;

		private BinaryNode top;
		public preOrderIterator(){
			top = new BinaryNode();
			s = new Stack<BinaryNode>();
			s.push(root);
		}
		
		
		@Override
		public boolean hasNext() {
			return (!(root == NULL_NODE) && !(s.isEmpty()));
		}

		@Override
		public T next() {
			if(s.isEmpty()){
				throw new  NoSuchElementException();
			}
			
			if(!s.isEmpty()){
				top = s.pop();
			}
			if(top.right != NULL_NODE){
				s.push(top.right);
			}
			if(top.left != NULL_NODE){
				s.push(top.left);
			}
			return top.data;
		}

		@Override
		public void remove() {
			// TODO Auto-generated method stub
			
		}

		
		
	}
	
	
	class iterator implements Iterator<T>{
		private boolean notPass = true;
		private Stack<BinaryNode> s;
//		int counter = 0;
//		private BinaryNode Left = new BinaryNode();
		private BinaryNode current = new BinaryNode();
		public iterator(){
//			Left = new BinaryNode();
			s = new Stack<BinaryNode>();
			s.push(root);
			current = root;
		}
		
		
		@Override
		public boolean hasNext() {
			return (!(root == NULL_NODE) && !(s.isEmpty()));
		}

		@Override
		public T next() {
			
			if(s.isEmpty()){
				throw new NoSuchElementException();
			}
			if(!hasNext()){
				throw new NoSuchElementException();
			}
			current = s.peek();
			while(current.left != NULL_NODE && notPass){
				s.push(current.left);
				current = current.left;
			}
			current = s.peek();
			BinaryNode result = s.pop();
			if(result.right!=NULL_NODE){
				s.push(result.right);
				notPass = false;
			}
			return result.data;
			
			
		}

		@Override
		public void remove() {
			// TODO Auto-generated method stub
			
		}

		
		
	}
	
	public String toString(){
		return root.toString();
		
	}
	// For manual tests only
	void setRoot(BinaryNode n) {
//		if(root == NULL_NODE){
			this.root = n;
//		}
//		else{
//			if(n.getData() < this.root.getData()){
//				
//			}
//		}
		
	}
	

	
	// Not private, since we need access for manual testing.
	class BinaryNode {
		private T data;
		private BinaryNode left;
		private BinaryNode right;
		
		

		public BinaryNode() {
			this.data = null;
			this.left = null;
			this.right = null;
		}
		
		
		public int getHeight() {
			if(this == NULL_NODE){
				return -1;
			}
			else{
				int left = this.left.getHeight()+1;
				int right = this.right.getHeight()+1;
				int larger = Math.max(left, right);
				return larger;
			}
			
		}


		public BinaryNode(T element) {
			this.data = element;
			this.left = NULL_NODE;
			this.right = NULL_NODE;
		}

		
		public String toString(){
//			if(this == NULL_NODE){
//				return "";
//			}
//			return left.toString() +"," + this.data.toString()+","+right.toString() + ",";
			return (this.toArrayList().toString());
		}
		
		public T getData() {
			return this.data;
		}
		
		public boolean isEmpty(){
			if (this == NULL_NODE){
				return true;
			}
			return !(left.isEmpty() || right.isEmpty());
		}
		
		public boolean contains(T item){
			if(this == NULL_NODE){
				return false;
			}
			return this.data.equals(item) || left.contains(item) || right.contains(item);
		}
		
		public ArrayList<T> toArrayList(){
			ArrayList<T> list = new ArrayList<T>();
			if(this == NULL_NODE){
				return list;
			}
			list.addAll(left.toArrayList());
			list.add(data);
			list.addAll(right.toArrayList());
			return list;
			
		}
		
//		public ArrayList<T> iterator(){
//			ArrayList<T> list = new ArrayList<T>();
//			if(this == NULL_NODE){
//				return list;
//			}
//			list.addAll(left.iterator());
//			list.add(data);
//			
//			list.addAll(right.iterator());
//			return list;
//		}
		
		public BinaryNode getLeft() {
			return this.left;
		}


		public BinaryNode getRight() {
			return this.right;
		}

		// For manual testing
		public void setLeft(BinaryNode left) {
			this.left = left;
		}
		
		public void setRight(BinaryNode right) {
			this.right = right;
		}
		
		public int size(){

			if(this == NULL_NODE){
				return 0;
			}
			return left.size() + right.size() +1;
		}


		public Object[] toArray() {
			return this.toArrayList().toArray();
		}
	}



	public ArrayList<T> toArrayList() {
//		System.out.print(this.root.toArrayList().toString());
		return this.root.toArrayList();
		
	}
	
		
//	public ArrayList<T> toiterator() {
////		System.out.print(this.root.toPreOrderList().toString());
//		return this.root.iterator();
//		
//	}
	public Object[] toArray() {
		return this.root.toArray();
	}

	public boolean isEmpty() {
		
		return (this.root == NULL_NODE);
	}

	public Iterator<T> preOrderIterator() {
		
		return new preOrderIterator();
	}

	@Override
	public Iterator<T> iterator() {
		// TODO Auto-generated method stub
//		System.out.print(this.root.iterator().toString());
		return new iterator();
	}

	public void insert(T i) {
		// TODO Auto-generated method stub
		
	}

	// TODO: Implement your 3 iterator classes here.

}
