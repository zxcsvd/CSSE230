

/**
 * This is a tree factory.
 * 
 * @author Curt Clifton. Created Jan 24, 2008.
 */
public final class BuildTree {

	/**
	 * Generates a binary tree whose node contents and pre-order traversal order
	 * come from charElements. For each of those nodes, the corresponding
	 * element in childCodes indicates the number of children, where L means one
	 * left child, R means one right child, and 0 and 2 mean zero and two
	 * children respectively.
	 * 
	 * @param charElements
	 * @param childCodes
	 * @return the binary tree constructed from charElements and childCodes
	 */
	public static BinaryTree preOrderBuild(CharSequence charElements,
			CharSequence childCodes) {

		if (childCodes.length() != charElements.length())
			throw new IllegalArgumentException(
					"The two parameters were not the same length");
		// loop charElements
		BinaryTree bt = new BinaryTree(preOrderHelper(charElements,childCodes));
		
		return bt;
	}

	public static BinaryNode preOrderHelper(CharSequence seq, CharSequence childCodes) {
		char a = childCodes.charAt(0);
		if (a == '2') {
			boolean flag = false;
			int place = 0;
			for (int i = 0; i < childCodes.length(); i++) {
				if (childCodes.charAt(i) == '0')
					flag = true;
				if (flag == true && childCodes.charAt(i) != '0') {
					place = i - 1;
					flag=false;
				}
			}
			return new BinaryNode(seq.charAt(0),
					//TODO FIX index error
					preOrderHelper(seq.subSequence(1, place),
							childCodes.subSequence(1, place)), preOrderHelper(
							seq.subSequence(place + 1, seq.length()),
							childCodes.subSequence(place, seq.length())));
		} else if (a == 'L') {
			return new BinaryNode(seq.charAt(0), preOrderHelper(
					seq.subSequence(1, seq.length()),
					childCodes.subSequence(1, childCodes.length())), null);

		} else if (a == 'R') {
			return new BinaryNode(seq.charAt(0), null, preOrderHelper(
					seq.subSequence(1, seq.length()),
					childCodes.subSequence(1, childCodes.length())));

		} else if (a == '0') {
			return new BinaryNode(seq.charAt(0), null, null);

		} else { // invalid character
			throw new IllegalArgumentException(
					"Invalid character present in arguement");
		}

	}
}
