package editortrees;

// A node in a height-balanced binary tree with rank.
// Except for the NULL_sNODE (if you choose to use one), one node cannot
// belong to two different trees.

public class Node {

	enum Code {
		SAME, LEFT, RIGHT
	};

	// The fields would normally be private, but for the purposes of this class,
	// we want to be able to test the results of the algorithms in addition to
	// the
	// "publicly visible" effects

	char element;
	Node left, right; // subtrees
	int rank; // inorder position of this node within its own subtree.
	Code balance;
	Node parent; // You may want this field.
	boolean isLeftThread;
	boolean isRightThread;

	// Feel free to add other fields that you find useful

	// You will probably want to add several other methods
	Node() {
		this.element = '\0';
		this.left = EditTree.NULL_NODE;
		this.right = EditTree.NULL_NODE;
		this.rank = -1;
		this.balance = Code.SAME;
		this.parent = EditTree.NULL_NODE;
		this.isLeftThread = true;
		this.isRightThread = true;
	}

	Node(char element, Node left, Node right, int rank, Code balance,
			Node parent, boolean isLeftThread, boolean isRightThread) {
		this.element = element;
		this.left = left;
		this.right = right;
		this.rank = rank;
		this.balance = balance;
		this.parent = parent;
		this.isLeftThread = isLeftThread;
		this.isRightThread = isRightThread;
	}

	// For the following methods, you should fill in the details so that they
	// work correctly
	public int height() {
		// TODO Milestone 1
		if (this == EditTree.NULL_NODE) {
			return -1;
		}
		return Math.max(left.height() + 1, right.height() + 1);
	}

	public int size() {
		if (this == EditTree.NULL_NODE) {
			return 0;
		} else {
			return 1 + this.left.size() + this.right.size();
		}
	}

	public void add(char c, int pos) throws IndexOutOfBoundsException {
		// TODO: Milestone 1
		if (pos == this.right.rank) {
			Node temp = this.right;
			this.right = new Node(c, EditTree.NULL_NODE, EditTree.NULL_NODE,
					pos, Code.SAME, this, this.isLeftThread, false);
			this.right.right = temp;
			this.right.left = temp.left;
			this.right.right.left = EditTree.NULL_NODE;
		} else if (pos == this.left.rank) {
			Node temp = this.left;
			this.left = new Node(c, EditTree.NULL_NODE, EditTree.NULL_NODE,
					pos, Code.SAME, this, false, this.isRightThread);
			this.left.right = temp;
			this.left.left = temp.left;
			this.left.right.left = EditTree.NULL_NODE;
		} else if (pos > this.rank) {
			if (this.right == EditTree.NULL_NODE) {
				this.right = new Node(c, this, this.right, pos, Code.SAME,
						this, true, true);
			} else {
				this.right.add(c, pos);
			}
		} else if (pos < this.rank) {
			if (this.left == EditTree.NULL_NODE) {
				this.left = new Node(c, this.left, this, pos, Code.SAME, this,
						true, true);
			} else {
				this.left.add(c, pos);
			}
		} else {
			throw new IndexOutOfBoundsException();
		}
	}

	public void add(char c) {
		// TODO: Milestone 1
		if (this.right == EditTree.NULL_NODE) {
			this.right = new Node(c, this, this.right, this.rank + 1,
					Code.SAME, this, true, true);
		} else {
			this.right.add(c);
		}

	}

	public void rotate() {
		if (this.balance == Code.SAME) {
			this.parent.rotate();
		} else if (this.balance == Code.LEFT) {
			Node temp = this;

		} else if (this.balance == Code.RIGHT) {

		}
	}

	public String toString() {
		StringBuilder result = new StringBuilder();
		if (this == EditTree.NULL_NODE) {
			return "";
		} else {
			result.append(this.left.toString());
			result.append(this.element);
			result.append(this.right.toString());
			return result.toString();
		}
	}

}