


public class BinarySearchTree<T> {
	private BinaryNode root;
	private BinaryNode left;
	private BinaryNode right;
//	private T data;
	private final BinaryNode NULL_NODE = new BinaryNode();

	public BinarySearchTree() {
		root = NULL_NODE;
		
	}

	public int size(){
		if(root == NULL_NODE){
			return 0;
		}
		else{
			return root.size()+1;
		}
		
		
	}
	
	
	public boolean contains(T a){
		return root.contains(a);
		
	}
	
	// For manual tests only
	void setRoot(BinaryNode n) {
		this.root = n;
		
	}
	
	// Not private, since we need access for manual testing.
	class BinaryNode {
		private T data;
		private BinaryNode left;
		private BinaryNode right;
		


		public BinaryNode() {
			this.data = null;
			this.left = null;
			this.right = null;
		}

		public BinaryNode(T element) {
			this.data = element;
			this.left = NULL_NODE;
			this.right = NULL_NODE;
		}

		public T getData() {
			return this.data;
		}
		
		public boolean contains(T item){
			if(this == NULL_NODE){
				return false;
			}
			return this.data.equals(item) || left.contains(item) || right.contains(item);
		}

		public BinaryNode getLeft() {
			return this.left;
		}


		public BinaryNode getRight() {
			return this.right;
		}

		// For manual testing
		public void setLeft(BinaryNode left) {
			this.left = left;
		}
		
		public void setRight(BinaryNode right) {
			this.right = right;
		}
		
		public int size(){
//			if(left == null && right == null){
//				return 1;
//			}
////			BinaryNode left = n.left;
////			BinaryNode right = n.right;
//			else if(left != null && right != null){
//				return left.size() + right.size() +1;
//			}
//			else if(left != null){
//				return left.size() +1 ;
//			}
//			else if(right != null ){
//				return right.size() +1 ;
//			}
			if(this == NULL_NODE){
				return 0;
			}
			return left.size() + right.size() +1;
		}
		
	}

	// TODO: Implement your 3 iterator classes here.

}
