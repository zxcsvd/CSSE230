import java.sql.*;
import java.util.regex.Matcher;
import java.util.regex.Pattern;

public class Procedures {
	  String connectionUrl = "jdbc:sqlserver://titan.csse.rose-hulman.edu:1433;" +
	 	         "databaseName=metal;user=zhangb2;password=Hyhy5920!";
	  Connection con = null;
	  PreparedStatement stmt = null;
	  ResultSet rs = null;
public String del (String sname){
		  
	 try {		  
         Class.forName("com.microsoft.sqlserver.jdbc.SQLServerDriver");
         con = DriverManager.getConnection(connectionUrl);
        	 String SQL2 = "Declare @tem int;set @tem = (select sid from songs where name = ?) delete from [user likes songs] where sid  = @tem";
        	 stmt = con.prepareStatement(SQL2);
        	 stmt.setString(1, sname);

	         try{
	        	 rs = stmt.executeQuery();
	         }
	         finally{
	        	 return "Success!";
	         }
      }

      catch (Exception e) {
         e.printStackTrace();
      }
      finally {
         if (rs != null) try { rs.close(); } catch(Exception e) {}
         if (stmt != null) try { stmt.close(); } catch(Exception e) {}
         if (con != null) try { con.close(); } catch(Exception e) {}
      }
	return "fail";
	  }	
	  
public ResultSet fav (String uid){
		  
		  try {

			  
	         Class.forName("com.microsoft.sqlserver.jdbc.SQLServerDriver");
	         con = DriverManager.getConnection(connectionUrl);
	         String SQL = "select name from songs, [user likes songs] where uid = ? and [user likes songs].[sid] = songs.[sid]";
	         
	         stmt = con.prepareStatement(SQL);
	         stmt.setString(1, uid);
	         rs = stmt.executeQuery();
	         return rs;
	      }
		  
	      catch (Exception e) {
	    	  System.out.println(e);
	      }
		  return rs;
	  }

@SuppressWarnings("finally")
public String like(String id, String sid){
		  
		  try {	
			  
			  	 Class.forName("com.microsoft.sqlserver.jdbc.SQLServerDriver");
		         con = DriverManager.getConnection(connectionUrl);
		         String SQL = "SELECT * FROM [user likes songs] WHERE Sid = ? and Uid =?";
		         stmt = con.prepareStatement(SQL);
		         stmt.setString(1, sid);
		         stmt.setString(2, id);
		         rs = stmt.executeQuery();
		         String t = "";
		         while (rs.next()) {
		        	 t = rs.getString(1);
			         
			     }
		         if(t == null || t == ""){
			  
			  
			  
			  
			  
			  
	         Class.forName("com.microsoft.sqlserver.jdbc.SQLServerDriver");
	         con = DriverManager.getConnection(connectionUrl);

	        	 String SQL2 = "SET NOCOUNT ON INSERT INTO [user likes songs] VALUES (?, ?)";
	        	 stmt = con.prepareStatement(SQL2);
	        	 stmt.setString(1, sid);
		         stmt.setString(2, id);
		         try{
		        	 rs = stmt.executeQuery();
		         }
		         finally{
		        	 return "Success!";
		         }

	      }
		         else {
		        	 return "duplicate";
		         }
		  }
		  
	      catch (Exception e) {
	         e.printStackTrace();
	      }
	      finally {
	         if (rs != null) try { rs.close(); } catch(Exception e) {}
	         if (stmt != null) try { stmt.close(); } catch(Exception e) {}
	         if (con != null) try { con.close(); } catch(Exception e) {}
	      }
		return "FAIL";
	  }
	  public String login(String username, String password){
		  
		  try {
			  Pattern p = Pattern.compile("[^a-z0-9 ]", Pattern.CASE_INSENSITIVE);
			  Matcher m = p.matcher(username);
			  boolean b = m.find();

			  if (b){
				  throw new Exception("username contains special characters");
			  }
			     
			  
	         Class.forName("com.microsoft.sqlserver.jdbc.SQLServerDriver");
	         con = DriverManager.getConnection(connectionUrl);
	         String SQL = "SELECT userid FROM [User] WHERE Username = ? and Password = ? ";

//	         System.out.print(SQL);
	         stmt = con.prepareStatement(SQL);
	         stmt.setString(1, username);
	         stmt.setInt(2, password.hashCode());
	         rs = stmt.executeQuery();
	        	
	         while (rs.next()) {
		          return (rs.getString(1));
		     }

	         String temp = "No valid username/password found!";
	         return temp;
	      }
		  
	      catch (Exception e) {
//	         e.printStackTrace();
	      }
	      finally {
	         if (rs != null) try { rs.close(); } catch(Exception e) {}
	         if (stmt != null) try { stmt.close(); } catch(Exception e) {}
	         if (con != null) try { con.close(); } catch(Exception e) {}
	      }
		return "Error! username or password contains special characters.";
	  }
	  @SuppressWarnings("finally")
	public String Register(String name, String username, String password){
		  
		  try {
			  Pattern p = Pattern.compile("[^a-z0-9 ]", Pattern.CASE_INSENSITIVE);
			  Matcher m = p.matcher(username);
			  boolean b = m.find();

			  if (b){
				  throw new Exception("username contains special characters");
			  }
	         Class.forName("com.microsoft.sqlserver.jdbc.SQLServerDriver");
	         con = DriverManager.getConnection(connectionUrl);
	         String SQL = "SELECT * FROM [User] WHERE Username = ? ";

//	         System.out.print(SQL);
	         stmt = con.prepareStatement(SQL);
	         stmt.setString(1, username);
	         rs = stmt.executeQuery();
	         String t = "";
	         while (rs.next()) {
	        	 t = rs.getString("Username");
		         System.out.println(t);
		     }
	         if(t == null || t == ""){
//	        	 System.out.println(t + "b");
	        	 String SQL2 = "SET NOCOUNT ON INSERT INTO [User] VALUES (?, ?, ?, 0, getdate())";
	        	 stmt = con.prepareStatement(SQL2);
	        	 stmt.setString(1, name);
		         stmt.setInt(3, password.hashCode());
		         stmt.setString(2, username);
//		         rs = stmt.executeQuery();
//		         String s = "";
//		         while (rs.next()){
//		        	 t = (rs.getString(1));
//		         }
//		         return t;
		         try{
		        	 rs = stmt.executeQuery();
		         }
		         finally{
		        	 return "Success!";
		         }


		         
	         }
	         else{
//	        	 System.out.println(t);
	        	 return "This user name has already been used";
	         }

	      }

	      catch (Exception e) {
	         e.printStackTrace();
	      }
	      finally {
	         if (rs != null) try { rs.close(); } catch(Exception e) {}
	         if (stmt != null) try { stmt.close(); } catch(Exception e) {}
	         if (con != null) try { con.close(); } catch(Exception e) {}
	      }
		return "Error! username or password contains special characters.";
	  }
	  
	  
	  public ResultSet Search (String keyword, String type){
		  
		  try {
//			  Pattern p = Pattern.compile("[^a-z0-9 ]", Pattern.CASE_INSENSITIVE);
//			  Matcher m = p.matcher(keyword);
//			  boolean b = m.find();
//
//			  if (b){
//				  throw new Exception("keyword contains special characters");
//			  }
			     
			  
	         Class.forName("com.microsoft.sqlserver.jdbc.SQLServerDriver");
	         con = DriverManager.getConnection(connectionUrl);
	         String SQL = "SELECT * FROM "+ type +" WHERE charindex (?,Name) != 0 ";
	         
//	         System.out.print(SQL);
	         stmt = con.prepareStatement(SQL);
	         stmt.setString(1, keyword);
	         rs = stmt.executeQuery();
	         return rs;
	      }
		  
	      catch (Exception e) {
	    	  System.out.println(e);
//	         e.printStackTrace();
	      }
//	      finally {
//	         if (rs != null) try { rs.close(); } catch(Exception e) {}
//	         if (stmt != null) try { stmt.close(); } catch(Exception e) {}
//	         if (con != null) try { con.close(); } catch(Exception e) {}
//	      }
		  return rs;
	  }
	  
	  public ResultSet Detail (String keyword, String type){
		  
		  try {
//			  Pattern p = Pattern.compile("[^a-z0-9 ]", Pattern.CASE_INSENSITIVE);
//			  Matcher m = p.matcher(keyword);
//			  boolean b = m.find();
//
//			  if (b){
//				  throw new Exception("keyword contains special characters");
//			  }
			     
			  
	         Class.forName("com.microsoft.sqlserver.jdbc.SQLServerDriver");
	         con = DriverManager.getConnection(connectionUrl);
	         String SQL = "SELECT * FROM "+type+" WHERE Name = ? ";
	         
//	         System.out.print(SQL);
	         stmt = con.prepareStatement(SQL);
	         stmt.setString(1, keyword);
	         rs = stmt.executeQuery();
	         return rs;
	      }
		  
	      catch (Exception e) {
	    	  System.out.println(e);
//	         e.printStackTrace();
	      }
//	      finally {
//	         if (rs != null) try { rs.close(); } catch(Exception e) {}
//	         if (stmt != null) try { stmt.close(); } catch(Exception e) {}
//	         if (con != null) try { con.close(); } catch(Exception e) {}
//	      }
		  return rs;
	  }
	  
	  
	  public ResultSet Relation (String keyword, String selfType, String targetType){
		  
		  try {
//			  Pattern p = Pattern.compile("[^a-z0-9 ]", Pattern.CASE_INSENSITIVE);
//			  Matcher m = p.matcher(keyword);
//			  boolean b = m.find();
//
//			  if (b){
//				  throw new Exception("keyword contains special characters");
//			  }
			 String tempID = "";
			 if (selfType == "Album"){
				 tempID = "Aid";
			 }else if(selfType == "Songs"){
				 tempID = "Sid";
			 }else if(selfType == "Member"){
				 tempID = "Mid";
			 }else if(selfType == "Tour"){
				 tempID = "Tid";
			 }else if(selfType == "Band"){
				 tempID = "Bid";
			 }else{
				 
			 }
			  
	         Class.forName("com.microsoft.sqlserver.jdbc.SQLServerDriver");
	         con = DriverManager.getConnection(connectionUrl);
	         String SQL = "SELECT "+ targetType +".Name FROM "+ selfType + "," + targetType +" WHERE " + selfType + "." + tempID + "= "+ targetType + "."+tempID + " and " + selfType + ".Name = [" + keyword + "] ";
	         System.out.println(SQL);
	         stmt = con.prepareStatement(SQL);
//	         stmt.setString(1, targetType);
//	         stmt.setString(2, keyword);
	         rs = stmt.executeQuery();
	         return rs;
	      }
		  
	      catch (Exception e) {
	    	  System.out.println(e);
//	         e.printStackTrace();
	      }
//	      finally {
//	         if (rs != null) try { rs.close(); } catch(Exception e) {}
//	         if (stmt != null) try { stmt.close(); } catch(Exception e) {}
//	         if (con != null) try { con.close(); } catch(Exception e) {}
//	      }
		  return rs;
	  }
}

