import java.util.ArrayList;

/**
 * Exam 2. Tree methods.
 * 
 * @author Matt Boutell and <<<TODO: YOUR NAME HERE>>>. Spring, 2014.
 * @param <T>
 */

/*
 * TODO: 0 Directions: Implement the given methods. See the javadoc for details.
 */
public class BinarySearchTree<T extends Comparable<? super T>> {

	BinaryNode root;
	int count = 0;
	private final BinaryNode NULL_NODE = new BinaryNode(null);

	public BinarySearchTree() {
		root = NULL_NODE;
	}

	/**
	 * @return The sum of the heights of every node in the tree. Don't count
	 *         NULL_NODEs.
	 */
	public int getSumOfHeights() {
		int count = 0;
		this.root.getSumOfHeights(this.root);
		return this.root.getSumOfHeightsR(this.root);
	}

	/**
	 * Recall that the depth of a node is number of edges in a path from the
	 * node to the root. Returns the depth of the given item in the tree. If the
	 * item isn't in the tree, then it returns -1.
	 * 
	 * @param item
	 * @return The depth, or -1 if it isn't in the tree.
	 */
	public int getDepth(T item) {
		this.root.setDepth(0);
//		BinaryNode current = this.root;
//		Boolean find = true;
		int a = this.root.find(this.root, item);
		if(a == 0){
			return 1;
		}else{
			return a;
		}
	}

	/**
	 * A full node is one with two non-null children. Counts how many full nodes
	 * this Binary Tree has.
	 * 
	 * @return The number of full nodes in this tree.
	 */
	public int countFullNodes() {
		// TODO: 3a Write this method or the other full node method. This one is
		// easier, but worth fewer points.
		return this.root.fullNode(this.root);
	}

	/**
	 * A full node is one with two non-null children. Return an ArrayList
	 * containing the data from all the full nodes in this tree. The order of
	 * the full nodes must be the same order they would appear in a pre-order
	 * traversal of the tree.
	 * 
	 * @return An array list of the full node's data, in pre-order
	 * 
	 */
	public ArrayList<T> getFullNodeList() {
		// TODO: 3b Write this method or the other full node method. This one is
		// harder, but worth more points.
		return null;
	}

	public void insert(T e) {
		root = root.insert(e);
	}

	// /////////////// BinaryNode
	public class BinaryNode {

		public T data;
		public BinaryNode left;
		public BinaryNode right;
		public int depth;
		public int height;
		

		public BinaryNode(T element) {
			this.data = element;
			this.left = NULL_NODE;
			this.right = NULL_NODE;
		}
		
		public void setDepth(int i){
			this.depth = i;
			int a = i;
			if (this.left.data== null && this.right.data == null) {
				// do nothing
			} else if (this.left.data == null) { // only set the right child's node
				this.right.setDepth(a + 1);
			} else if (this.right.data == null) { // only set the left child's node
				this.left.setDepth(a + 1);
			} else {// need to set them both
				this.left.setDepth(a + 1);
				this.right.setDepth(a + 1);
			}
		}

		public BinaryNode insert(T e) {
			if (this == NULL_NODE) {
				return new BinaryNode(e);
			} else if (e.compareTo(data) < 0) {
				left = left.insert(e);
			} else if (e.compareTo(data) > 0) {
				right = right.insert(e);
			} else {
				// do nothing
			}
			
			return this;
		}
		
		public int getSumOfHeights (BinaryNode current){
			if(current.left.data!=null && current.right.data!=null){
				this.height = Math.max(this.getSumOfHeights(current.left),this.getSumOfHeights(current.right))+1;
//				return this.getSumOfHeights(current.left) + this.getSumOfHeights(current.right) + 1 ;
			}
			else if(current.left.data== null && current.right.data == null){
				this.height = 0;
//				return 0;
			}
			else if(current.left.data != null && current.right.data == null){
				this.height = this.getSumOfHeights(current.left)+1;
//				return this.getSumOfHeights(current.left)+1 ;
			}
			else if(current.left.data == null && current.right.data !=null){
				this.height = this.getSumOfHeights(current.right)+1;
//				return this.getSumOfHeights(current.right)+1;
				
			}
			return this.height;
		}
		
		public int getSumOfHeightsR (BinaryNode current){
			if(current.left.data!=null && current.right.data!=null){
//				this.height = this.getSumOfHeights(current.left)+current.height+this.getSumOfHeights(current.right);
				return this.getSumOfHeightsR(current.left) + this.getSumOfHeightsR(current.right) + current.height ;
			}
			else if(current.left.data== null && current.right.data == null){
				return current.height;
			}
			else if(current.left.data != null && current.right.data == null){
//				this.height = this.getSumOfHeights(current.left)+current.height;
				return this.getSumOfHeightsR(current.left)+current.height ;
			}
			else if(current.left.data == null && current.right.data !=null){
//				this.height = this.getSumOfHeights(current.right)+1;
				return this.getSumOfHeightsR(current.right)+current.height;
				
			}
			return 0;
		}
		public int find(BinaryNode current, T target){
			if(current.data.equals(target)){
				return current.depth;
			}
			if(current.left.data!=null && current.right.data!=null){
				return this.getSumOfHeights(current.left) + this.getSumOfHeights(current.right);
			}
			else if(current.left.data== null && current.right.data == null){
				return 0;
			}
			else if(current.left.data != null && current.right.data == null){
				return this.getSumOfHeights(current.left);
			}
			else if(current.left.data == null && current.right.data !=null){
				return this.getSumOfHeights(current.right);
			}
			return 0;
		}
		
		public int fullNode (BinaryNode current){
			if(current.left.data!=null && current.right.data!=null){
				
				return this.fullNode(current.left) + this.fullNode(current.right)+1;
			}
			else if(current.left.data== null && current.right.data == null){
				return 0;
			}
			else if(current.left.data != null && current.right.data == null){
				return this.fullNode(current.left);
			}
			else if(current.left.data == null && current.right.data !=null){
				return this.fullNode(current.right);
			}
			return 0;
		}
		
		

	}
}